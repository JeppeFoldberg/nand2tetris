// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=aluout, b=instruction, sel=not15, out=firstmux);  // choses between instruction and former alu-output

    Mux16(a=false, b=instruction, sel=instruction[15], out[3]=writeM);  // Makes sure that we do not write to m if a-instruction

    Not(in=instruction[15], out=not15);
    Or(a=not15, b=instruction[5], out=loada);
    ARegister(in=firstmux, load=loada, out=areg, out[0..14]=addressM);  // A register. Det giver jo egentlig lidt sig selv nu
    
    And(a=instruction[15], b=instruction[4], out=loadd);
    DRegister(in=aluout, load=loadd, out=dreg);  // D register

    And(a=instruction[15], b=instruction[12], out=usea);
    Mux16(a=areg, b=inM, sel=usea, out=secmux);  // Choses between A register or contents of M(ram[A])

    ALU(x=dreg, y=secmux, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8],
        f=instruction[7], no=instruction[6], out=aluout, out=outM, zr=zrc, ng=ngc);  // You know this!

    Or(a=zrc, b=ngc, out=temp);  // Making bit that shows if alu-out is positive
    Not(in=temp, out=pos);

    And(a=instruction[0], b=pos, out=temp2);
    And(a=instruction[1], b=zrc, out=temp3);
    And(a=instruction[2], b=ngc, out=temp4);
    Or(a=temp2, b=temp3, out=or1);
    Or(a=or1, b=temp4, out=temp5);
    And(a=instruction[15], b=temp5, out=jump);
    Not(in=jump, out=notjump);

    // And(a=ngc, b=j1, out=lessbit);
    // And(a=zrc, b=j2, out=eqbit);
    // And(a=pos, b=j3, out=posbit);
    // Or(a=lessbit, b=eqbit, out=temp2);
    // Or(a=temp2, b=posbit, out=jump);
    // Not(in=jump, out=notjump);
   
    // Xor(a=ngc, b=j1, out=temp2);
    // Xor(a=zrc, b=j2, out=temp3);
    // Xor(a=pos, b=j3, out=temp4);
    // Not(in=temp2, out=n2);
    // Not(in=temp3, out=n3);
    // Not(in=temp4, out=n4);
    // And(a=n2, b=n3, out=temp5);
    // And(a=temp5, b=n4, out=jump);
    // Not(in=jump, out=notjump);

    PC(in=areg, load=jump, inc=notjump, reset=reset, out[0..14]=pc);  // program counter
}